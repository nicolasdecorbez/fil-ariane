---
version: "3"


services:

  api:
    container_name: ardiane_api
    image: ardianethread/ardiane_api:latest
    depends_on:
      - database
    environment:
      DATABASE_USER: "ardiane"
      DATABASE_PASSWORD: "password"
      DATABASE_DB: "ardiane"
      DATABASE_HOST: "database"
    labels:
      - traefik.http.routers.api.rule=Host(`api.ardiane.com`)
      - traefik.http.routers.api.middlewares=cors@docker
    restart: on-failure

  db_dashboard:
    container_name: ardiane_dashboard
    image: ardianethread/ardiane_dashboard:latest
    depends_on: 
      - api
    labels: 
      - traefik.http.routers.db_dashboard.rule=Host(`dashboard.ardiane.com`)
      - traefik.http.routers.db_dashboard.middlewares=cors@docker
    restart: on-failure

  database:
    container_name: ardiane_database
    image: postgres:13.3
    environment:
      POSTGRES_USER: "ardiane"
      POSTGRES_PASSWORD: "password"
      POSTGRES_DB: "ardiane"
    labels:
      - traefik.enable=false
    restart: on-failure
    volumes:
      - "ardiane-data:/var/lib/postgresql/data"

  traefik:
    container_name: ardiane_proxy
    image: traefik:2.4.8
    labels:
      - traefik.http.routers.dashboard.rule=Host(`proxy.ardiane.com`)
      - traefik.http.routers.dashboard.service=api@internal
      - traefik.http.middlewares.cors.headers.accesscontrolalloworigin=*
      - traefik.http.middlewares.cors.headers.accesscontrolallowheaders=Content-Type
      - traefik.http.middlewares.cors.headers.addvaryheader=true
    ports:
      - "80:80"
    restart: on-failure
    volumes:
      - "/var/run/docker.sock:/var/run/docker.sock:ro"
      - "./traefik/traefik.toml:/traefik.toml"

  pgadmin:
    container_name: ardiane_pgadmin
    image: dpage/pgadmin4:5
    depends_on:
      - database
    environment:
      PGADMIN_DEFAULT_EMAIL: admin@admin.com
      PGADMIN_DEFAULT_PASSWORD: my-secret-pw 
    labels:
      - traefik.http.routers.pgadmin.rule=Host(`pgadmin.ardiane.com`)
    restart: always


volumes:
  ardiane-data: {}
